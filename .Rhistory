x1 <- t(scale(t(m)))
x1
m[gene.sets[[1]],]
x1[gene.sets[[1]], ]
x1 <- t(scale(t(m)))
x1 <- svd(x1)
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m, scale = TRUE, center = TRUE)
x2 <- x2$v[,1]
x2
x2 <- runExactSVD(t(m), scale = TRUE, center = TRUE)
x2 <- x2$v[,1]
x2
x1
t(m)
scale(t(m))
x2 <- runExactSVD(m, scale = TRUE, center = TRUE)
x1 <- t(scale(t(m)))
x1 <- svd(x1)
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m, scale = colMeans(m), center = TRUE)
x2 <- x2$v[,1]
x2
colMeans(m)
x2 <- runExactSVD(m, scale = colSds(m), center = TRUE)
x2 <- x2$v[,1]
x2
x1
x2
x2 <- runExactSVD(m, scale = colSds(m), center = colMeans(m))
x2 <- x2$v[,1]
x1
x2
colSds(m)
colMeans(m)
x2 <- runExactSVD(t(m), scale = colSds(m), center = colMeans(m))
x2 <- x2$v[,1]
x2
x1
x2 <- runExactSVD(m, scale = colSds(t(m)), center = colMeans(t(m)))
x2 <- x2$v[,1]
x2
x1
x1 <- t(scale(t(m)))
x1
colSds(m)
rowSds(m)
x1 <- t(scale(t(m)))
x1 <- svd(x1)
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m, center= colMeans(m), scale= rowSds(m))
x2 <- x2$v[,1]
x2
x2 <- runExactSVD(m, center= colMeans(m), scale= rowSds(m))
x2$v[,1]
x3 <- runSVD(m, k=Inf)
x4 <- runExactSVD(m)
x3
x4 <- runExactSVD(m)
x4
x1 <- t(scale(t(m)))
x1 <- svd(x1[gene.sets[[1]],])
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m[gene.sets[[1]],], center= colMeans(m), scale= rowSds(m))
x2 <- x2$v[,1]
x2
x3 <- runSVD(m[gene.sets[[1]],], k=Inf)
x3$v[,1]
x2
x2 <- runExactSVD(m[gene.sets[[1]],], center= colMeans(m), scale= rowSds(m))
x2
x1
x1 <- t(scale(t(m)))
x1
x1 <- svd(x1[gene.sets[[1]],])
x1
x2 <- runExactSVD(m[gene.sets[[1]],], center= colMeans(m), scale= rowSds(m))
x2
rowSds(m)
x1 <- t(scale(t(m)))
x1 <- svd(x1[gene.sets[[1]],])
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m[gene.sets[[1]],], center= colMeans(m), scale= rowSds(t(m)))
x2 <- x2$v[,1]
x2
colMeans(m)
apply(m, 2, sd)
x1 <- t(scale(t(m)))
x1 <- svd(x1[gene.sets[[1]],])
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m[gene.sets[[1]],], center= colMeans(m), scale= TRUE)
x2 <- x2$v[,1]
x2
x1 <- scale(m)
x1 <- t(scale(t(m)))
x1 <- svd(x1[1,])
x1
x1 <- svd(x1[1,,drop=FALSE])
x1 <- svd(x1[1, , drop=FALSE])
x1[1, , drop=FALSE]
x1[1,  drop=FALSE]
x1 <- t(scale(t(m)))
x1 <- t(scale(t(m)))
x1 <- svd(x1[1,  ,drop=FALSE])
x1
x2 <- runExactSVD(m[1, ])
x2 <- runExactSVD(m[1, , drop=FALSE])
x2
x2 <- runExactSVD(m[1, , drop=FALSE], center=TRUE, scale=TRUE)
x2
x1 <- t(scale(t(m)))
x1 <- svd(x1[1:2,])
x1
x2 <- runExactSVD(m[1:2,], center=TRUE, scale=TRUE)
x2
x2 <- runExactSVD(m[1:2,], center=colMeans(t(m)), scale=TRUE)
x2
x <- gene.sets[[1]]
x
x1 <- svd(x1[x,])
x <- gene.sets[[1]]
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= colSds(t(m)))
x2 <- x2$v[,1]
x2
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= colSds(m))
x2 <- x2$v[,1]
x2
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1 <- x1$v[,1]
x1
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(t(m)))
x2 <- x2$v[,1]
x2
x2 <- runExactSVD(m[x,], center= colMeans(m), scale= rowSds(t(m)))
x2 <- x2$v[,1]
x2
x2 <- runExactSVD(m[x,], center= colMeans(m), scale= colSds(t(m)))
x2 <- x2$v[,1]
x2
x1
x2 <- runExactSVD(m[x,], center= colMeans(m), scale= colSds(m))
x2 <- x2$v[,1]
x2
x1
scale(t(m))
colMeans(t(m))
colSds(m)
colSds(t(m))
rowSds(m)
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(m))
x2 <- x2$v[,1]
x2
x1
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(m))
x2
min(dim(m[x,]))
x2 <- runSvd(m[x,], k=2, center= colMeans(t(m)), scale= rowSds(m))
x2 <- runSVD(m[x,], k=2, center= colMeans(t(m)), scale= rowSds(m))
x2
x1$v[,1]
x2$v[,1]
x2 <- runSVD(m[x,], k=2, center= colMeans(t(m)), scale= rowSds(m), BSPARAM = ExactParam())
x2$v[,1]
x2 <- runSVD(m[x,], k=2, center= colMeans(t(m)), scale= rowSds(m), BSPARAM = FastAutoParam())
x2$v[,1]
x2 <- runSVD(m[x,], k=2, center= colMeans(t(m)), scale= rowSds(m), BSPARAM = bsparam())
x2$v[,1]
x2 <- runSVD(m[x,], k=2, center= colMeans(t(m)), scale= rowSds(m), BSPARAM = ExactParam(deferred=TRUE))
x2$v[,1]
x1 <- t(scale(t(m)))
x1
colMeans(t(m))
owSds(m)
rowSds(m)
m
m <- matrix(sample.int(10, 25, T), 5, 5)
colnames(m) <- paste0("cell_", 1:5)
rownames(m) <- paste0("gene_", 1:5)
set.seed(123)
m <- matrix(sample.int(10, 25, T), 5, 5)
colnames(m) <- paste0("cell_", 1:5)
rownames(m) <- paste0("gene_", 1:5)
gene.sets <- list("my_list1"= c(1,2))
m <- matrix(sample.int(10, 25, T), 5, 5)
colnames(m) <- paste0("cell_", 1:5)
rownames(m) <- paste0("gene_", 1:5)
x <- c(1,2)
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1$v[,1]
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(m))
x2$v[,1]
rowSds(m)
scale(t(m))
t(scale(t(m)))
x1 <- t(scale(t(m)))
x1@scaled
str(x)
str(x1)
x1$scaled
x1@scaled
attr(x1)
attr(x1, "scaled:scale")
x2 <- runExactSVD(t(m[x,]), center= colMeans(t(m)), scale= rowSds(m))
x2$v[,1]
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(m))
x2$v[,1]
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(t(m)))
x1$v[,1]
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1$v[,1]
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(t(m)))
x2$v[,1]
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= rowSds(m))
x2$v[,1]
C <- colMeans(t(m))
i <- 1
sqrt(sum((m[,i] - C[i])^2)/(ncol(m)-1))
x2 <- runExactSVD(m[x,], center= colMeans(t(m)), scale= TRUE)
x2$v[,1]
x1$v[,1]
colMeans(t(m))
rowMeans(m)
rowSds(m)
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1$v[,1]
x2 <- runExactSVD(m[x,], center= rowMeans(m), scale= rowSds(m))
x2$v[,1]
library(BiocSingular)
set.seed(123)
m <- matrix(sample.int(10, 25, T), 5, 5)
x <- c(1,2)
x1 <- t(scale(t(m)))
x1 <- svd(x1[x,])
x1$v[,1]
x2 <- runExactSVD(t(scale(t(m))))
x2$v[,1]
x1 <- t(scale(t(m)))
res1 <- svd(x1[x,])
res1$v[,1]
x2 <- runExactSVD(x1[x,])
x2$v[,1]
x3 <- runExactSVD(m[x,], center=colMeans(t(m)))
x3
library(matrixStats)
x1 <- t(scale(t(m)))
x2 <- t( (t(m) - colMeans(t(m))) /  colSds(t(m)) )
x1
x2
x2 <- t( (t(m) - colMeans(t(m))) /  rowSds(t(m)) )
x2
x1 <- t(scale(t(m)))
x2 <- t( (t(m) - colMeans(t(m))) /  apply(t(m), 2, sd) )
x1
x2
apply(t(m), 2, sd)
m
x1
t(m)
scale(m)
m
x1 <- t(scale(t(m)))
x1
x1 <- t(scale(t(m)))
x2 <- t( (t(m) - colMeans(t(m))) /  apply(t(m), 2, sd) )
x1
x2
colMeans(t(m))
apply(t(m), 2, sd)
m
x1 <- scale(t(m))
x2 <- (t(m) - colMeans(t(m))) /  apply(t(m), 2, sd)
x1
x2
x2 <- (t(m) - colMeans(t(m))) /  (apply(t(m), 2, sd))
x1
x2
x1 <- scale(m)
x2 <- (m - colMeans(m)) /  (apply(m, 2, sd))
x1
x2
library(bench)
m <- matrix(sample.int(10, 25, T), 10, 10)
genes <- c(1,2)
x <- t(scale(t(m)))
m <- matrix(sample.int(10, 25, T), 10, 10)
genes <- c(1,2)
bench::mark(
svd(x[genes,]),
runExactSVD(x[genes,])
)
library(Matrix)
m<-rsparsematrix(10,10,.5)
m
# m <- matrix(sample.int(10, 25, T), 10, 10)
m<-rsparsematrix(1000,10000,.5)
genes <- c(1:400)
x <- t(scale(t(m)))
X
x
x1 <- t(scale(t(m)))
x2 <- as(x1, "dgCMatrix")
bench::mark(
svd(x1[genes,]),
runExactSVD(x2[genes,])
)
bench::mark(
svd(x1[genes,]),
runExactSVD(m[genes,])
)
bench::mark(
svd(x1[genes,]),
runExactSVD(m[genes,]),
check=FALSE
)
bench::mark(
svd(x1[genes,]),
runExactSVD(x1[genes,]),
check=FALSE
)
x1 <- NULL
x2 <- NULL
m <- NULL
x <- NULL
library(BiocSingular)
set.seed(123)
m <- matrix(sample.int(10, 25, T), 10, 10)
genes <- 1:2
genes
genes <- c(1:2)
genes
genes <- 1:2
m <- matrix(sample.int(10, 25, T), 10, 10)
genes <- 1:2
x1 <- t(scale(t(m)))
res1 <- svd(x1[genes,])
res$v[,1]
res1$v[,1]
m
t(m)
apply(t(m),2,sd)
res2 <- runExactSVD(m, center=colMeans(t(m)), scale=apply(t(m),2,sd))
res2$v[,1]
res1$v[,1]
res2 <- runExactSVD(m, center=colMeans(t(m)), scale=apply(m,2,sd))
res2$v[,1]
svd( t( (t(m) - C) / colSds(t(m)) )[genes,] )
t(m) - colMeans(t(m))
t(m)
colMeans(t(m))
colSds(t(m))
( t(m) - colMeans(t(m)) ) / colSds(t(m))
sweep(t(m), 2, colMeanst(m))
sweep(t(m), 2, colMeans(t(m)))
svd( t( sweep(t(m), 2, colMeans(t(m))) / colSds(t(m)) ) )
svd( t( sweep(t(m), 2, colMeans(t(m))) / colSds(t(m)) )[genes,] )
svd( t( sweep(t(m), 2, colMeans(t(m))) / colSds(t(m)) )[genes,] )$v[,1]
x1 <- t(scale(t(m)))
res1 <- svd(x1[genes,])
res1$v[,1]
svd( t( sweep(t(m), 2, colMeans(t(m))) / rowSds(t(m)) )[genes,] )$v[,1]
res1$v[,1]
X <- m
Z <- Matrix::t(X)
Z <- .dgCapply(Z, scale, 2)
Z <- Matrix::t(Z)
Z
library(Matrix)
library(SingleCellExperiment)
library(BiocParallel)
library(sparseMatrixStats)
m<-rsparsematrix(10,10,.5)
colnames(m) <- paste0("cell_", 1:10)
rownames(m) <- paste0("gene_", 1:10)
# gset.idx.list <- list("my_genes" = sample(rownames(m), 2))
geneSets <- list("my_genes1" = c(1,3))
library(GSVA)
x <- gsva(m, geneSets, method="plage")
colnames(m) <- paste0("cell_", 1:10)
rownames(m) <- paste0("gene_", 1:10)
x <- gsva(m, geneSets, method="plage")
# gset.idx.list <- list("my_genes" = sample(rownames(m), 2))
geneSets <- list("my_genes1" = c("gene_1","gene_3"))
x <- gsva(m, geneSets, method="plage")
x
x <- gsva(m, geneSets, method="zscore")
x
x <- gsva(m, geneSets, method="ssgsea")
x
X <- m
n <- ncol(X)
if(is(X, "dgCMatrix")){
R <- t(sparseMatrixStats::colRanks(X, ties.method = "average"))
mode(R) <- "integer"
} else {
R <- apply(X, 2, function(x, p) as.integer(rank(x)), p)
}
R
R <- t(sparseMatrixStats::colRanks(X, ties.method = "average"))
mode(R) <- "integer"
R
R <- apply(X, 2, function(x, p) as.integer(rank(x)), p)
R
R <- t(sparseMatrixStats::colRanks(X, ties.method = "average"))
source('~/curro/gsva-devel/devel3_ssgsea.R', echo=TRUE)
mode(R) <- "integer"
R
Ra <- abs(R)^alpha
Ra
es <- bplapply(as.list(1:n), function(j) {
geneRanking <- order(R[, j], decreasing=TRUE)
es_sample <- lapply(geneSets, .fastRndWalk, geneRanking, j, Ra)
unlist(es_sample)
}, BPPARAM=BPPARAM)
.fastRndWalk <- function(gSetIdx, geneRanking, j, Ra) {
n <- length(geneRanking)
k <- length(gSetIdx)
idxs <- sort.int(fastmatch::fmatch(gSetIdx, geneRanking))
stepCDFinGeneSet2 <-
sum(Ra[geneRanking[idxs], j] * (n - idxs + 1)) /
sum((Ra[geneRanking[idxs], j]))
stepCDFoutGeneSet2 <- (n * (n + 1) / 2 - sum(n - idxs + 1)) / (n - k)
walkStat <- stepCDFinGeneSet2 - stepCDFoutGeneSet2
walkStat
}
n <- ncol(X)
es <- bplapply(as.list(1:n), function(j) {
geneRanking <- order(R[, j], decreasing=TRUE)
es_sample <- lapply(geneSets, .fastRndWalk, geneRanking, j, Ra)
unlist(es_sample)
}, BPPARAM=BPPARAM)
es
geneSets <- 1,3
geneSets <- c(1,3)
es <- bplapply(as.list(1:n), function(j) {
geneRanking <- order(R[, j], decreasing=TRUE)
es_sample <- lapply(geneSets, .fastRndWalk, geneRanking, j, Ra)
unlist(es_sample)
}, BPPARAM=BPPARAM)
es
es <- do.call("cbind", es)
es
geneSets <- 1
es <- bplapply(as.list(1:n), function(j) {
geneRanking <- order(R[, j], decreasing=TRUE)
es_sample <- lapply(geneSets, .fastRndWalk, geneRanking, j, Ra)
unlist(es_sample)
}, BPPARAM=BPPARAM)
es
es <- do.call("cbind", es)
es
if (normalization) {
## normalize enrichment scores by using the entire data set, as indicated
## by Barbie et al., 2009, online methods, pg. 2
es <- apply(es, 2, function(x, es) x / (range(es)[2] - range(es)[1]), es)
}
normalization=TRUE
if (normalization) {
## normalize enrichment scores by using the entire data set, as indicated
## by Barbie et al., 2009, online methods, pg. 2
es <- apply(es, 2, function(x, es) x / (range(es)[2] - range(es)[1]), es)
}
es
rownames(es) <- names(geneSets)
colnames(es) <- colnames(X)
geneSets <- c(1,3)
es <- bplapply(as.list(1:n), function(j) {
geneRanking <- order(R[, j], decreasing=TRUE)
es_sample <- lapply(geneSets, .fastRndWalk, geneRanking, j, Ra)
unlist(es_sample)
}, BPPARAM=BPPARAM)
es <- do.call("cbind", es)
if (normalization) {
## normalize enrichment scores by using the entire data set, as indicated
## by Barbie et al., 2009, online methods, pg. 2
es <- apply(es, 2, function(x, es) x / (range(es)[2] - range(es)[1]), es)
}
es
if(is(X, "dgCMatrix")){
es <- as(es, "dgCMatrix")
}
es
rownames(es) <- names(geneSets)
colnames(es) <- colnames(X)
if(is(X, "dgCMatrix")){
es <- as(es, "dgCMatrix")
}
es
setwd("~/curro/gsva-devel/GSVA")
devtools::check(vignettes = FALSE)
devtools::check(vignettes = FALSE)
devtools::build(vignettes = FALSE)
devtools::install(build_vignettes = FALSE)
x <- gsva(sce, gset.idx.list, method="zscore")
x <- gsva(sce, gset.idx.list, method="ssgsea")
X
